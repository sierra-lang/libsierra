remark: <unknown>:0:0: SCoP begins here.
remark: <unknown>:0:0: Inbounds assumption:	[n, p_1] -> {  : n <= 0 or (n > 0 and p_1 >= n) }
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: SCoP ends here.
domain: "[n, p_1] -> { Stmt_for_body26[i0, i1] : 0 <= i0 < n and 0 <= i1 < n; Stmt_for_body8[i0, i1] : 0 <= i0 < n and 0 <= i1 < n }"
child:
  mark: "TaskSequence"
  child:
    sequence:
    - filter: "[n, p_1] -> { Stmt_for_body8[i0, i1] }"
      child:
        mark: "Task"
        child:
          mark: "1st level tiling - Tiles"
          child:
            schedule: "[n, p_1] -> [{ Stmt_for_body8[i0, i1] -> [(floor((i0)/32))] }, { Stmt_for_body8[i0, i1] -> [(floor((i1)/32))] }]"
            permutable: 1
            coincident: [ 1, 0 ]
            child:
              mark: "1st level tiling - Points"
              child:
                schedule: "[n, p_1] -> [{ Stmt_for_body8[i0, i1] -> [(i0 - 32*floor((i0)/32))] }, { Stmt_for_body8[i0, i1] -> [(i1 - 32*floor((i1)/32))] }]"
                permutable: 1
                coincident: [ 1, 0 ]
    - filter: "[n, p_1] -> { Stmt_for_body26[i0, i1] }"
      child:
        mark: "Task"
        child:
          mark: "1st level tiling - Tiles"
          child:
            schedule: "[n, p_1] -> [{ Stmt_for_body26[i0, i1] -> [(floor((i0)/32))] }, { Stmt_for_body26[i0, i1] -> [(floor((i1)/32))] }]"
            permutable: 1
            coincident: [ 1, 0 ]
            child:
              mark: "1st level tiling - Points"
              child:
                schedule: "[n, p_1] -> [{ Stmt_for_body26[i0, i1] -> [(i0 - 32*floor((i0)/32))] }, { Stmt_for_body26[i0, i1] -> [(i1 - 32*floor((i1)/32))] }]"
                permutable: 1
                coincident: [ 1, 0 ]
:: isl ast :: kernel_mvt :: entry.split => for.end44
[n, p_1] -> {  : -2147483648 <= n <= 2147483647 and 0 <= p_1 <= 4294967295 }
[n, p_1] -> { Stmt_for_body26[i0, i1] -> [1, o1, o2, o3, o4] : 32*floor((-i0 + o3)/32) = -i0 + o3 and 32*floor((-i1 + o4)/32) = -i1 + o4 and 0 <= i0 < n and 0 <= i1 < n and -31 + i0 <= 32o1 <= i0 and -31 + i1 <= 32o2 <= i1 and 0 <= o3 <= 31 and 0 <= o4 <= 31; Stmt_for_body8[i0, i1] -> [0, o1, o2, o3, o4] : 32*floor((-i0 + o3)/32) = -i0 + o3 and 32*floor((-i1 + o4)/32) = -i1 + o4 and 0 <= i0 < n and 0 <= i1 < n and -31 + i0 <= 32o1 <= i0 and -31 + i1 <= 32o2 <= i1 and 0 <= o3 <= 31 and 0 <= o4 <= 31 }
if (p_1 >= n && (&MemRef_x2[n] <= &MemRef_x1[0] || &MemRef_x1[n] <= &MemRef_x2[0]) && (&MemRef_A[n - 1][n] <= &MemRef_x1[0] || &MemRef_x1[n] <= &MemRef_A[0][0]) && (&MemRef_y_1[n] <= &MemRef_x1[0] || &MemRef_x1[n] <= &MemRef_y_1[0]) && (&MemRef_y_2[n] <= &MemRef_x1[0] || &MemRef_x1[n] <= &MemRef_y_2[0]) && (&MemRef_A[n - 1][n] <= &MemRef_x2[0] || &MemRef_x2[n] <= &MemRef_A[0][0]) && (&MemRef_y_1[n] <= &MemRef_x2[0] || &MemRef_x2[n] <= &MemRef_y_1[0]) && (&MemRef_y_2[n] <= &MemRef_x2[0] || &MemRef_x2[n] <= &MemRef_y_2[0]))

    // TaskSequence
    {
      // Task
      // 1st level tiling - Tiles
      #pragma omp parallel for
      for (int c0 = 0; c0 <= floord(n - 1, 32); c0 += 1)
        for (int c1 = 0; c1 <= (n - 1) / 32; c1 += 1) {
          // 1st level tiling - Points
          for (int c2 = 0; c2 <= min(31, n - 32 * c0 - 1); c2 += 1)
            #pragma minimal dependence distance: 1
            for (int c3 = 0; c3 <= min(31, n - 32 * c1 - 1); c3 += 1)
              Stmt_for_body8(32 * c0 + c2, 32 * c1 + c3);
        }
      // Task
      // 1st level tiling - Tiles
      #pragma omp parallel for
      for (int c0 = 0; c0 <= floord(n - 1, 32); c0 += 1)
        for (int c1 = 0; c1 <= (n - 1) / 32; c1 += 1) {
          // 1st level tiling - Points
          for (int c2 = 0; c2 <= min(31, n - 32 * c0 - 1); c2 += 1)
            #pragma minimal dependence distance: 1
            for (int c3 = 0; c3 <= min(31, n - 32 * c1 - 1); c3 += 1)
              Stmt_for_body26(32 * c0 + c2, 32 * c1 + c3);
        }
    }

else
    {  /* original code */ }

remark: <unknown>:0:0: SCoP begins here.
remark: <unknown>:0:0: Inbounds assumption:	[n, p_1] -> {  : n <= 0 or (n > 0 and p_1 >= n) }
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: Possibly aliasing pointer, use restrict keyword.
remark: <unknown>:0:0: SCoP ends here.
